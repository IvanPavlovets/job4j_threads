package ru.job4j;

/**
 * Илюстрация проблемы видимости.
 * Методы get и increase могут быть вызваны параллельно из разных нитей.
 * В этом случае одна нить увеличит счетчик, а вторая эти данные не успеет прочитать.
 * Такая ситуация называется проблемой видимости (visilibity).
 * Чтобы обе нити видели изменения друг другая с общими ресурсами
 * нужно работать только в критической секции.
 */
public class Count {
    private int value;

    /**
     * Операция инкремента выполняется в критической секции
     */
    public synchronized void increment() {
        value++;
    }

    /**
     * Метод get по своей природе тоже атомарный,
     * но без критической секции (без synchronized).
     * Метод не будет находиться в зоне видимости
     * других нитей и могут быть проблемы видимости (visilibity).
     * @return int
     */
    public int get() {
        return value;
    }
}
